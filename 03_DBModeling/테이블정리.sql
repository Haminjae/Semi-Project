-- 테이블

============================TABLE========================================
CREATE TABLE MEMBER(
    email VARCHAR2(40) PRIMARY KEY,
    pwd VARCHAR2(200) NOT NULL,
    name VARCHAR2(10) NOT NULL,
    birthday DATE NOT NULL,
    gender VARCHAR2(3) NOT NULL CONSTRAINT CK_GENDER CHECK(gender IN ('남', '여')),
    phone VARCHAR2(20) NOT NULL,
    address VARCHAR2(400),
    member_kakao VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_MEMBER_KAKAO CHECK(member_kakao IN ('Y', 'N')),
    member_type VARCHAR2(1) DEFAULT 'G' NOT NULL CONSTRAINT CK_MEMBER_TYPE CHECK(member_type IN ('G', 'M', 'R')),
    member_delete_status VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_MEMBER_DELETE_STATUS CHECK(member_delete_status IN ('Y', 'N'))
);

CREATE TABLE BRANCH(
    branch_num VARCHAR2(10) PRIMARY KEY,
    branch_manager_email VARCHAR2(40) NOT NULL,
    branch_address VARCHAR2(100) NOT NULL,
    branch_phone VARCHAR2(20) NOT NULL,
    branch_img VARCHAR2(50),
    branch_website VARCHAR2(100),
    branch_point NUMBER DEFAULT 0 NOT NULL CONSTRAINT CK_BRANCH_POINT CHECK(branch_point BETWEEN 0 AND 5),
    branch_option_shower VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_SHOWER CHECK(branch_option_shower IN ('Y', 'N')),
    branch_option_park VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_PARK CHECK(branch_option_park IN ('Y', 'N')),
    branch_option_uniform VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_UNIFORM CHECK(branch_option_uniform IN ('Y', 'N')),
    branch_option_shoes VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_SHOES CHECK(branch_option_shoes IN ('Y', 'N')),
    branch_option_ball VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_BALL CHECK(branch_option_ball IN ('Y', 'N')),
    branch_option_inout VARCHAR2(1) DEFAULT 'O' NOT NULL CONSTRAINT CK_BRANCH_OPTION_INOUT CHECK(branch_option_inout IN ('I', 'O')),
    branch_delete_status VARCHAR(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_DELETE_STATUS CHECK(branch_delete_status IN ('Y', 'N')),
    CONSTRAINT FK_BRANCH_MANAGER_EMAIL FOREIGN KEY(branch_manager_email) REFERENCES MEMBER(email) ON DELETE SET NULL
);

CREATE TABLE REVIEW(
    review_num NUMBER PRIMARY KEY,
    review_email VARCHAR2(40) NOT NULL,
    branch_num VARCHAR2(10) NOT NULL,
    review_content VARCHAR2(200) NOT NULL,
    review_point NUMBER DEFAULT 0 NOT NULL CONSTRAINT CK_REVIEW_POINT CHECK(review_point BETWEEN 0 AND 5),
    CONSTRAINT FK_REVIEW_EMAIL FOREIGN KEY(review_email) REFERENCES MEMBER(email) ON DELETE SET NULL,
    CONSTRAINT FK_REVIEW_BRANCH_NUM FOREIGN KEY(branch_num) REFERENCES BRANCH(branch_num) ON DELETE SET NULL
);


CREATE TABLE STADIUM(
    stadium_num NUMBER PRIMARY KEY,
    stadium_branch_num VARCHAR2(10) NOT NULL,
    stadium_name VARCHAR2(10) NOT NULL,
    stadium_match_member VARCHAR2(10),
    stadium_reservation_start_time NUMBER NOT NULL,
    stadium_reservation_end_time NUMBER NOT NULL,
    stadium_delete_status VARCHAR(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_STADIUM_DELETE_STATUS CHECK(stadium_delete_status IN ('Y', 'N')),
    CONSTRAINT FK_STADIUM_BRANCH_NUM FOREIGN KEY(stadium_branch_num) REFERENCES BRANCH(branch_num) ON DELETE SET NULL
);

CREATE TABLE BOARD(
    board_num NUMBER PRIMARY KEY,
    writer_email VARCHAR2(40) NOT NULL,
    board_title VARCHAR2(50) NOT NULL,
    board_content VARCHAR2(200) NOT NULL,
    board_img VARCHAR2(50),
    board_date DATE NOT NULL,
    CONSTRAINT FK_BOARD_WRITER_EMAIL FOREIGN KEY(writer_email) REFERENCES MEMBER(email) ON DELETE SET NULL
);

CREATE TABLE TEAM(
    team_code VARCHAR2(10) PRIMARY KEY,
    team_leader VARCHAR2(40) NOT NULL,
    team_num NUMBER NOT NULL,
    team_name VARCHAR2(20) NOT NULL,
    team_gender VARCHAR2(10) NOT NULL,
    team_age VARCHAR2(10) NOT NULL,
    team_region VARCHAR2(20) NOT NULL,
    team_point NUMBER DEFAULT 0 NOT NULL CONSTRAINT CK_TEAM_POINT CHECK(team_point BETWEEN 0 AND 5),
    team_mark_img VARCHAR2(50) NOT NULL,
    team_active_lastday DATE NOT NULL,
    team_delete_status VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_TEAM_DELETE_STATUS CHECK(team_delete_status IN ('Y', 'N')),
    CONSTRAINT FK_TEAM_LEADER FOREIGN KEY(team_leader) REFERENCES MEMBER(email) ON DELETE SET NULL
);

CREATE TABLE NOTICE(
    notice_email VARCHAR2(40) NOT NULL,
    notice_type VARCHAR2(10) NOT NULL,
    notice_content VARCHAR2(200) NOT NULL,
    notice_start_time DATE NOT NULL,
    notice_delete_status VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_NOTICE_DELETE_STATUS CHECK(notice_delete_status IN ('Y', 'N')),
    notice_team_code VARCHAR2(10) NOT NULL,
    notice_reservation_code VARCHAR2(10) NOT NULL,
    CONSTRAINT FK_NOTICE_EMAIL FOREIGN KEY(notice_email) REFERENCES MEMBER(email) ON DELETE SET NULL,
    CONSTRAINT FK_NOTICE_TEAM_CODE FOREIGN KEY(notice_team_code) REFERENCES TEAM(team_code) ON DELETE SET NULL,
    CONSTRAINT FK_NOTICE_RESERVATION_CODE FOREIGN KEY(notice_reservation_code) REFERENCES RESERVATION(reservation_code) ON DELETE SET NULL
);

CREATE TABLE TEAMMEMBER(
    supporter_email VARCHAR2(40) NOT NULL,
    support_team VARCHAR2(10) NOT NULL,
    teammember_num NUMBER NOT NULL,
    position VARCHAR2(10) NOT NULL,
    application_status VARCHAR2(1) DEFAULT 'W' NOT NULL CONSTRAINT CK_APPLICATION_STATUS CHECK(application_status IN ('Y', 'W', 'N')),
    delete_status VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_DELETE_STATUS CHECK(delete_status IN ('Y', 'N')),
    CONSTRAINT FK_SUPPORTER_EMAIL FOREIGN KEY(supporter_email) REFERENCES MEMBER(email) ON DELETE SET NULL,
    CONSTRAINT FK_SUPPORT_TEAM FOREIGN KEY(support_team) REFERENCES TEAM(team_code) ON DELETE SET NULL
);


CREATE TABLE MATCHREGIST(
    regist_num NUMBER PRIMARY KEY,
    regist_team VARCHAR2(10) NOT NULL,
    regist_reservation_code VARCHAR2(10) NOT NULL,
    regist_status VARCHAR2(1) DEFAULT 'Y' NOT NULL CONSTRAINT CK_MATCH_REGIST_STATUS CHECK(regist_status IN ('Y', 'N')),    
    regist_branch_num VARCHAR2(10) NOT NULL,
    regist_stadium_num NUMBER NOT NULL,
    CONSTRAINT FK_MATCH_REGIST_BRANCH_NUM FOREIGN KEY(regist_branch_num) REFERENCES BRANCH(branch_num) ON DELETE SET NULL,
    CONSTRAINT FK_MATCH_REGIST_STADIUM_NUM FOREIGN KEY(regist_stadium_num) REFERENCES STADIUM(stadium_num) ON DELETE SET NULL,
    CONSTRAINT FK_MATCH_REGIST_TEAM FOREIGN KEY(regist_team) REFERENCES TEAM(team_code) ON DELETE SET NULL,
    CONSTRAINT FK_MATCH_REGIST_RESERVATION FOREIGN KEY(regist_reservation_code) REFERENCES RESERVATION(reservation_code) ON DELETE SET NULL
);


CREATE TABLE RESERVATION(
    reservation_code VARCHAR2(10) PRIMARY KEY,
    reservation_email VARCHAR2(40) NOT NULL,
    reservation_branch_num VARCHAR2(10) NOT NULL, 
    reservation_stadium_num NUMBER NOT NULL,
    reservation_num NUMBER NOT NULL,
    reservation_price NUMBER NOT NULL,
    reservation_usage_start_time NUMBER NOT NULL,
    reservation_usage_time NUMBER NOT NULL,
    reservation_usage_end_time NUMBER NOT NULL,
    reservation_usage_start_date DATE NOT NULL,
    reservation_status VARCHAR2(1) DEFAULT 'Y' NOT NULL CONSTRAINT CK_RESERVATION_STATUS CHECK(reservation_status IN ('Y', 'N')),
    CONSTRAINT FK_RESERVATION_EMAIL FOREIGN KEY(reservation_email) REFERENCES MEMBER(email) ON DELETE SET NULL,
    CONSTRAINT FK_RESERVATION_BRANCH_NUM FOREIGN KEY(reservation_branch_num) REFERENCES BRANCH(branch_num) ON DELETE SET NULL,
    CONSTRAINT FK_RESERVATION_STADIUM_NUM FOREIGN KEY(reservation_stadium_num) REFERENCES STADIUM(stadium_num) ON DELETE SET NULL
);


CREATE TABLE MATCH(
    match_regist_num NUMBER NOT NULL,
    match_team VARCHAR2(10) NOT NULL,
    match_num NUMBER NOT NULL,
    match_application_status VARCHAR2(1) DEFAULT 'W' NOT NULL CONSTRAINT CK_MATCH_APPLICATION_STATUS CHECK(match_application_status IN ('W', 'Y', 'N')),
    match_winlose VARCHAR2(1) DEFAULT 'N' CONSTRAINT CK_MATCH_WINLOSE CHECK(match_winlose IN ('W', 'L', 'D', 'N')),
    manager_point_status VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_MANAGER_POINT_STATUS CHECK(manager_point_status IN ('Y', 'N')),
    match_branch_num VARCHAR2(10) NOT NULL,
    match_stadium_num NUMBER NOT NULL,
    match_reservation_code VARCHAR2(10) NOT NULL,
    CONSTRAINT FK_MATCH_REGIST_NUM FOREIGN KEY(match_regist_num) REFERENCES MATCHREGIST(regist_num) ON DELETE SET NULL,
    CONSTRAINT FK_MATCH_TEAM FOREIGN KEY(match_team) REFERENCES TEAM(team_code) ON DELETE SET NULL,
    CONSTRAINT FK_MATCH_STADIUM_NUM FOREIGN KEY(match_stadium_num) REFERENCES STADIUM(stadium_num) ON DELETE SET NULL,
    CONSTRAINT FK_MATCH_BRANCH_NUM FOREIGN KEY(match_branch_num) REFERENCES BRANCH(branch_num) ON DELETE SET NULL,
    CONSTRAINT FK_MATCH_RESERVATION FOREIGN KEY(match_reservation_code) REFERENCES RESERVATION(reservation_code) ON DELETE SET NULL
);
============================SEQUENCE========================================
CREATE SEQUENCE SEQ_BOARD_NUM
START WITH 1
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_REVIEW_NUM
START WITH 1
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_TEAM_NUM
START WITH 1
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_TEAMMEMBER_NUM
START WITH 1
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_MATCH_NUM
START WITH 1
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_STADIUM_NUM
START WITH 1
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_RESERVATION_NUM
START WITH 1
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;


CREATE SEQUENCE SEQ_MATCH_REGIST_NUM
START WITH 1
INCREMENT BY 1
MAXVALUE 1000
NOCYCLE
NOCACHE;
============================VIEW========================================
GRANT CREATE VIEW TO GB;

CREATE OR REPLACE VIEW TEAMLIST
AS
SELECT ROWNUM RNUM, DESCTEAM.*
FROM (SELECT *
        FROM TEAM
        WHERE TEAM_DELETE_STATUS = 'N'
        ORDER BY TEAM_NUM DESC) DESCTEAM;

CREATE OR REPLACE VIEW TEAMMEMBERLIST
AS
SELECT ROWNUM RNUM, DESCTEAMMEMBER.*
FROM (SELECT *
        FROM TEAMMEMBER
            JOIN MEMBER ON (SUPPORTER_EMAIL = EMAIL)
        WHERE APPLICATION_STATUS = 'Y' AND DELETE_STATUS = 'N'
        ORDER BY TEAMMEMBER_NUM DESC) DESCTEAMMEMBER;
        
CREATE OR REPLACE VIEW TEAMAPPLICATIONLIST
AS
SELECT ROWNUM RNUM, DESCTEAMMEMBER.*
FROM (SELECT *
        FROM TEAMMEMBER
            JOIN MEMBER ON (SUPPORTER_EMAIL = EMAIL)
        WHERE APPLICATION_STATUS = 'W'
        ORDER BY TEAMMEMBER_NUM DESC) DESCTEAMMEMBER;

CREATE OR REPLACE VIEW STADIUMLIST
AS
SELECT ROWNUM RNUM, DESCSTADIUM.*
FROM (SELECT *
        FROM STADIUM
            JOIN BRANCH ON (stadium_branch_num = BRANCH_NUM)
        WHERE STADIUM_DELETE_STATUS = 'N'
        ORDER BY STADIUM_NUM DESC) DESCSTADIUM;

CREATE OR REPLACE VIEW RESERVATIONLIST
AS
SELECT ROWNUM RNUM, DESCRESERVATION.*
FROM (SELECT *
        FROM RESERVATION
        JOIN STADIUM ON (RESERVATION_STADIUM_NUM = STADIUM_NUM)
        WHERE RESERVATION_STATUS = 'Y'
        ORDER BY RESERVATION_NUM DESC) DESCRESERVATION;


CREATE OR REPLACE VIEW MATCHLIST
AS
SELECT ROWNUM RNUM, DESCMATCH.*
FROM (SELECT *
        FROM MATCH
        JOIN MATCHREGIST ON (MATCH_REGIST_NUM = REGIST_NUM)
        JOIN TEAM ON (MATCH_TEAM = TEAM_CODE)
        JOIN RESERVATION ON (MATCH_RESERVATION_CODE = RESERVATION_CODE)
        JOIN BRANCH ON (MATCH_BRANCH_NUM = BRANCH_NUM)
        JOIN STADIUM ON (MATCH_STADIUM_NUM = STADIUM_NUM)
        WHERE RESERVATION_STATUS='Y' AND RESERVATION_USAGE_START_DATE >= SYSDATE
        ORDER BY MATCH_NUM DESC) DESCMATCH;        
        
CREATE OR REPLACE VIEW MATCHREGISTLIST
AS
SELECT ROWNUM RNUM, DESCMATCHREGIST.*
FROM (SELECT *
        FROM MATCHREGIST
        JOIN TEAM ON (REGIST_TEAM = TEAM_CODE)
        JOIN RESERVATION ON (REGIST_RESERVATION_CODE = RESERVATION_CODE)
        JOIN BRANCH ON (REGIST_BRANCH_NUM = BRANCH_NUM)
        JOIN STADIUM ON (REGIST_STADIUM_NUM = STADIUM_NUM)
        WHERE REGIST_STATUS IN ('Y','N') AND RESERVATION_STATUS='Y' AND RESERVATION_USAGE_START_DATE >= SYSDATE
        ORDER BY REGIST_NUM DESC) DESCMATCHREGIST;


commit;

DROP TABLE MEMBER;
DROP TABLE BRANCH;
DROP TABLE REVIEW;
DROP TABLE STADIUM;
DROP TABLE RESERVATION;
DROP TABLE BOARD;
DROP TABLE TEAM;
DROP TABLE NOTICE;
DROP TABLE TEAMMEMBER;
DROP TABLE MATCHREGIST;
DROP TABLE MATCH;

--매치 리스트

CREATE OR REPLACE VIEW MATCHREGISTLIST
AS
SELECT ROWNUM RNUM, DESCMATCHREGIST.*
FROM (SELECT *
        FROM MATCHREGIST
        JOIN TEAM ON (REGIST_TEAM = TEAM_CODE)
        JOIN RESERVATION ON (REGIST_RESERVATION_CODE = RESERVATION_CODE)
        JOIN BRANCH ON (REGIST_BRANCH_NUM = BRANCH_NUM)
        JOIN STADIUM ON (REGIST_STADIUM_NUM = STADIUM_NUM)
        WHERE REGIST_STATUS IN ('Y','N') AND RESERVATION_STATUS='Y' AND RESERVATION_USAGE_START_DATE >= SYSDATE
        ORDER BY REGIST_NUM DESC) DESCMATCHREGIST;
        

--리뷰테이블
CREATE TABLE REVIEW(
    review_num NUMBER PRIMARY KEY,
    review_email VARCHAR2(40) NOT NULL,
    review_branch_num VARCHAR2(20) NOT NULL,
    review_content VARCHAR2(200) NOT NULL,
    review_point NUMBER DEFAULT 0 NOT NULL CONSTRAINT CK_REVIEW_POINT CHECK(review_point BETWEEN 0 AND 5),
    review_date VARCHAR2(20) NOT NULL,
    review_delete_status VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_REVIEW_DELETE_STATUS CHECK(review_delete_status IN ('Y', 'N')),
    CONSTRAINT FK_REVIEW_EMAIL FOREIGN KEY(review_email) REFERENCES MEMBER(email) ON DELETE SET NULL,
    CONSTRAINT FK_REVIEW_BRANCH_NUM FOREIGN KEY(review_branch_num) REFERENCES BRANCH(branch_num) ON DELETE SET NULL
);

                                                                                                   
                                                                                  
-- (VIEW) REVIEWLIST                                                                                                   
CREATE OR REPLACE VIEW REVIEWLIST
AS
SELECT ROWNUM RNUM, DESCREVIEW.*
FROM (SELECT *
        FROM REVIEW
        JOIN MEMBER ON (REVIEW_EMAIL = EMAIL)
        WHERE REVIEW_DELETE_STATUS = 'N'
        ORDER BY REVIEW_NUM DESC) DESCREVIEW;

-- REVIEW 샘플 데이터 추가.                                                                                                   
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'werty45@daum.net', 'BN1', '여기좋습니다', '4', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'werty23@daum.net', 'BN1', '여기좋습니다', '4', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer1@daum.net', 'BN1', '아주좋습니다', '5', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'werty45@daum.net', 'BN1', '별로~', '1', '2020-09-07 13:20:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer1@daum.net', 'BN1', '그냥그럼', '2', '2020-09-07 13:15:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer2@daum.net', 'BN1', '보통', '3', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer1@daum.net', 'BN1', '보통', '3', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer3@daum.net', 'BN1', '보통', '3', '2020-09-07 13:11:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer4@daum.net', 'BN1', '아주좋습니다', '5', '2020-09-07 14:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer3@daum.net', 'BN1', '보통', '3', '2020-09-07 13:55:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer4@daum.net', 'BN1', '그냥그럼', '2', '2020-09-07 16:54:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer3@daum.net', 'BN1', '보통', '3', '2020-09-07 13:23:31', 'N');


-- BRANCH 테이블 수정
--기존 테이블 삭제
DROP TABLE BRANCH CASCADE;


-- 테이블 다시 추가.
CREATE TABLE BRANCH(
    branch_num VARCHAR2(20) PRIMARY KEY,
    branch_manager_email VARCHAR2(40) NOT NULL,
    branch_address VARCHAR2(200) NOT NULL,
    branch_phone VARCHAR2(20) NOT NULL,
    branch_img VARCHAR2(50),
    branch_website VARCHAR2(100),
    branch_branchInfo VARCHAR2(60),
    branch_detailInfo VARCHAR2(3000),
    branch_notes VARCHAR2(300),
    branch_point NUMBER DEFAULT 0 NOT NULL CONSTRAINT CK_BRANCH_POINT CHECK(branch_point BETWEEN 0 AND 5),
    branch_option_shower VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_SHOWER CHECK(branch_option_shower IN ('Y', 'N')),
    branch_option_park VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_PARK CHECK(branch_option_park IN ('Y', 'N')),
    branch_option_uniform VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_UNIFORM CHECK(branch_option_uniform IN ('Y', 'N')),
    branch_option_shoes VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_SHOES CHECK(branch_option_shoes IN ('Y', 'N')),
    branch_option_ball VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_BALL CHECK(branch_option_ball IN ('Y', 'N')),
    branch_option_inout VARCHAR2(1) DEFAULT 'O' NOT NULL CONSTRAINT CK_BRANCH_OPTION_INOUT CHECK(branch_option_inout IN ('I', 'O')),
    branch_delete_status VARCHAR(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_DELETE_STATUS CHECK(branch_delete_status IN ('Y', 'N')),
    CONSTRAINT FK_BRANCH_MANAGER_EMAIL FOREIGN KEY(branch_manager_email) REFERENCES MEMBER(email) ON DELETE SET NULL
);


-- 뷰 추가 ( 정규동 )

-- BRANCHLIST 뷰
CREATE OR REPLACE VIEW BRANCHLIST
AS
SELECT ROWNUM RNUM, BRANCH_NUM, BRANCH_MANAGER_EMAIL, BRANCH_ADDRESS,
BRANCH_PHONE, BRANCH_IMG, BRANCH_WEBSITE, BRANCH_POINT,
BRANCH_OPTION_SHOWER, BRANCH_OPTION_PARK, BRANCH_OPTION_UNIFORM, 
BRANCH_OPTION_SHOES, BRANCH_OPTION_BALL, BRANCH_OPTION_INOUT,
BRANCH_DELETE_STATUS, BRANCHINFO, BRANCH_DETAILINFO, 
BRANCH_NOTES, STADIUM_NUM, STADIUM_BRANCH_NUM, 
STADIUM_NAME, STADIUM_MATCH_MEMBER, STADIUM_RESERVATION_START_TIME,
STADIUM_RESERVATION_END_TIME, STADIUM_DELETE_STATUS
FROM(SELECT * FROM BRANCH JOIN STADIUM ON(BRANCH_NUM = STADIUM_BRANCH_NUM)
WHERE BRANCH_DELETE_STATUS = 'N' ORDER BY BRANCH_NUM DESC);

-- TEAMMEMBERLIST
CREATE OR REPLACE VIEW TEAMMEMBERLIST
AS
SELECT SUPPORTER_EMAIL, SUPPORT_TEAM, TEAMMEMBER_NUM, POSITION, APPLICATION_STATUS, DELETE_STATUS, TEAM_CODE, TEAM_LEADER, TEAM_NUM, TEAM_NAME, TEAM_GENDER,
TEAM_AGE, TEAM_REGION, TEAM_POINT, TEAM_MARK_IMG, TEAM_ACTIVE_LASTDAY, TEAM_DELETE_STATUS
FROM(SELECT * FROM TEAMMEMBER JOIN TEAM ON(SUPPORT_TEAM = TEAM_CODE)
WHERE DELETE_STATUS = 'N');

COMMIT;
