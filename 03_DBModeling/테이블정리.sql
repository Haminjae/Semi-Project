--매치 리스트
CREATE OR REPLACE VIEW MATCHREGISTLIST
AS
SELECT ROWNUM RNUM, DESCMATCHREGIST.*
FROM (SELECT *
        FROM MATCHREGIST
        JOIN TEAM ON (REGIST_TEAM = TEAM_CODE)
        JOIN RESERVATION ON (REGIST_RESERVATION_CODE = RESERVATION_CODE)
        JOIN BRANCH ON (REGIST_BRANCH_NUM = BRANCH_NUM)
        JOIN STADIUM ON (REGIST_STADIUM_NUM = STADIUM_NUM)
        WHERE REGIST_STATUS IN ('Y','N') AND RESERVATION_STATUS='Y' AND RESERVATION_USAGE_START_DATE >= SYSDATE
        ORDER BY REGIST_NUM DESC) DESCMATCHREGIST;
        

--리뷰테이블
CREATE TABLE REVIEW(
    review_num NUMBER PRIMARY KEY,
    review_email VARCHAR2(40) NOT NULL,
    review_branch_num VARCHAR2(20) NOT NULL,
    review_content VARCHAR2(200) NOT NULL,
    review_point NUMBER DEFAULT 0 NOT NULL CONSTRAINT CK_REVIEW_POINT CHECK(review_point BETWEEN 0 AND 5),
    review_date VARCHAR2(20) NOT NULL,
    review_delete_status VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_REVIEW_DELETE_STATUS CHECK(review_delete_status IN ('Y', 'N')),
    CONSTRAINT FK_REVIEW_EMAIL FOREIGN KEY(review_email) REFERENCES MEMBER(email) ON DELETE SET NULL,
    CONSTRAINT FK_REVIEW_BRANCH_NUM FOREIGN KEY(review_branch_num) REFERENCES BRANCH(branch_num) ON DELETE SET NULL
);

                                                                                                   
                                                                                  
-- (VIEW) REVIEWLIST                                                                                                   
CREATE OR REPLACE VIEW REVIEWLIST
AS
SELECT ROWNUM RNUM, DESCREVIEW.*
FROM (SELECT *
        FROM REVIEW
        JOIN MEMBER ON (REVIEW_EMAIL = EMAIL)
        WHERE REVIEW_DELETE_STATUS = 'N'
        ORDER BY REVIEW_NUM DESC) DESCREVIEW;

-- REVIEW 샘플 데이터 추가.                                                                                                   
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'werty45@daum.net', 'BN1', '여기좋습니다', '4', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'werty23@daum.net', 'BN1', '여기좋습니다', '4', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer1@daum.net', 'BN1', '아주좋습니다', '5', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'werty45@daum.net', 'BN1', '별로~', '1', '2020-09-07 13:20:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer1@daum.net', 'BN1', '그냥그럼', '2', '2020-09-07 13:15:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer2@daum.net', 'BN1', '보통', '3', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer1@daum.net', 'BN1', '보통', '3', '2020-09-07 13:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer3@daum.net', 'BN1', '보통', '3', '2020-09-07 13:11:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer4@daum.net', 'BN1', '아주좋습니다', '5', '2020-09-07 14:23:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer3@daum.net', 'BN1', '보통', '3', '2020-09-07 13:55:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer4@daum.net', 'BN1', '그냥그럼', '2', '2020-09-07 16:54:31', 'N');
INSERT INTO REVIEW VALUES(SEQ_REVIEW_NUM.NEXTVAL, 'wer3@daum.net', 'BN1', '보통', '3', '2020-09-07 13:23:31', 'N');


-- BRANCH 테이블 수정
--기존 테이블 삭제
DROP TABLE BRANCH CASCADE;


-- 테이블 다시 추가.
CREATE TABLE BRANCH(
    branch_num VARCHAR2(20) PRIMARY KEY,
    branch_manager_email VARCHAR2(40) NOT NULL,
    branch_address VARCHAR2(200) NOT NULL,
    branch_phone VARCHAR2(20) NOT NULL,
    branch_img VARCHAR2(50),
    branch_website VARCHAR2(100),
    branch_branchInfo VARCHAR2(60),
    branch_detailInfo VARCHAR2(3000),
    branch_notes VARCHAR2(300),
    branch_point NUMBER DEFAULT 0 NOT NULL CONSTRAINT CK_BRANCH_POINT CHECK(branch_point BETWEEN 0 AND 5),
    branch_option_shower VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_SHOWER CHECK(branch_option_shower IN ('Y', 'N')),
    branch_option_park VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_PARK CHECK(branch_option_park IN ('Y', 'N')),
    branch_option_uniform VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_UNIFORM CHECK(branch_option_uniform IN ('Y', 'N')),
    branch_option_shoes VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_SHOES CHECK(branch_option_shoes IN ('Y', 'N')),
    branch_option_ball VARCHAR2(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_OPTION_BALL CHECK(branch_option_ball IN ('Y', 'N')),
    branch_option_inout VARCHAR2(1) DEFAULT 'O' NOT NULL CONSTRAINT CK_BRANCH_OPTION_INOUT CHECK(branch_option_inout IN ('I', 'O')),
    branch_delete_status VARCHAR(1) DEFAULT 'N' NOT NULL CONSTRAINT CK_BRANCH_DELETE_STATUS CHECK(branch_delete_status IN ('Y', 'N')),
    CONSTRAINT FK_BRANCH_MANAGER_EMAIL FOREIGN KEY(branch_manager_email) REFERENCES MEMBER(email) ON DELETE SET NULL
);


-- 뷰 추가 ( 정규동 )

-- BRANCHLIST 뷰
CREATE OR REPLACE VIEW BRANCHLIST
AS
SELECT ROWNUM RNUM, BRANCH_NUM, BRANCH_MANAGER_EMAIL, BRANCH_ADDRESS,
BRANCH_PHONE, BRANCH_IMG, BRANCH_WEBSITE, BRANCH_POINT,
BRANCH_OPTION_SHOWER, BRANCH_OPTION_PARK, BRANCH_OPTION_UNIFORM, 
BRANCH_OPTION_SHOES, BRANCH_OPTION_BALL, BRANCH_OPTION_INOUT,
BRANCH_DELETE_STATUS, BRANCHINFO, BRANCH_DETAILINFO, 
BRANCH_NOTES, STADIUM_NUM, STADIUM_BRANCH_NUM, 
STADIUM_NAME, STADIUM_MATCH_MEMBER, STADIUM_RESERVATION_START_TIME,
STADIUM_RESERVATION_END_TIME, STADIUM_DELETE_STATUS
FROM(SELECT * FROM BRANCH JOIN STADIUM ON(BRANCH_NUM = STADIUM_BRANCH_NUM)
WHERE BRANCH_DELETE_STATUS = 'N' ORDER BY BRANCH_NUM DESC);

-- TEAMMEMBERLIST
CREATE OR REPLACE VIEW TEAMMEMBERLIST
AS
SELECT SUPPORTER_EMAIL, SUPPORT_TEAM, TEAMMEMBER_NUM, POSITION, APPLICATION_STATUS, DELETE_STATUS, TEAM_CODE, TEAM_LEADER, TEAM_NUM, TEAM_NAME, TEAM_GENDER,
TEAM_AGE, TEAM_REGION, TEAM_POINT, TEAM_MARK_IMG, TEAM_ACTIVE_LASTDAY, TEAM_DELETE_STATUS
FROM(SELECT * FROM TEAMMEMBER JOIN TEAM ON(SUPPORT_TEAM = TEAM_CODE)
WHERE DELETE_STATUS = 'N');

COMMIT;
